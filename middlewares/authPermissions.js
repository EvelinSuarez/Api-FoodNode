// middlewares/authPermissions.js (CORREGIDO PARA OPCI√ìN A)

const { findByRoleId } = require("../repositories/rolePrivilegesRepository"); // Ajusta la ruta si es necesario
const ADMIN_ROLE_ID = 1; // Aseg√∫rate que esto es un n√∫mero si idRole en el token es un n√∫mero

const authorize = (requiredPermissions = []) => {
  return async (req, res, next) => {
    const requiredPermsString = requiredPermissions.join(', ') || 'Ninguno espec√≠fico';

    try {
      // 1. Verificar que req.user y sus propiedades necesarias (id, idRole) fueron establecidos.
      if (!req.user || typeof req.user.id === 'undefined' || typeof req.user.idRole === 'undefined' || req.user.idRole === null) {
        console.warn("‚ö†Ô∏è [AUTH-PERMISSIONS] Autorizaci√≥n fallida: Usuario no autenticado o falta informaci√≥n cr√≠tica (id o idRole) en req.user.");
        console.log("‚ö†Ô∏è [AUTH-PERMISSIONS] Contenido de req.user:", req.user);
        return res.status(401).json({ message: "No autorizado. Sesi√≥n inv√°lida o informaci√≥n de usuario incompleta." });
      }

      const userId = req.user.id;
      const userRoleId = req.user.idRole; // Usamos idRole directamente del token

      // console.log(`üë§ [AUTH-PERMISSIONS] Usuario autenticado: ID=${userId}, RolID=${userRoleId}`);

      // 2. Si el usuario es Administrador...
      if (userRoleId === ADMIN_ROLE_ID) {
        // console.log(`üëë [AUTH-PERMISSIONS] Usuario es Admin (RolID: ${ADMIN_ROLE_ID}). Acceso TOTAL concedido.`);
        return next();
      }

      // 3. Si NO es Admin...
      // console.log(`üë§ [AUTH-PERMISSIONS] Usuario NO es Admin. Verificando permisos espec√≠ficos para RolID: ${userRoleId}...`);

      if (!requiredPermissions || requiredPermissions.length === 0) {
          // console.log("‚úÖ [AUTH-PERMISSIONS] Ruta no requiere permisos espec√≠ficos y usuario est√° autenticado (no-admin). Acceso concedido.");
          return next();
      }

      let userOwnedPermissions;
      try {
        userOwnedPermissions = await findByRoleId(userRoleId);
      } catch (dbError) {
        console.error("‚ùå [AUTH-PERMISSIONS] Error al llamar a findByRoleId:", dbError);
        return res.status(500).json({ message: "Error interno al obtener permisos del rol." });
      }

      // console.log(` P [AUTH-PERMISSIONS] Permisos del usuario (RolID ${userRoleId}) desde BD: [${(userOwnedPermissions || []).join(', ')}]`);

      if (!userOwnedPermissions || userOwnedPermissions.length === 0) {
        console.warn(`‚ö†Ô∏è [AUTH-PERMISSIONS] Autorizaci√≥n fallida: RolID ${userRoleId} (no-admin) NO TIENE NING√öN PERMISO asignado en la BD.`);
        return res.status(403).json({ message: "Acceso denegado. Tu rol no tiene privilegios configurados." });
      }

      const hasRequiredPermission = requiredPermissions.some(requiredPerm =>
        userOwnedPermissions.includes(requiredPerm)
      );

      // console.log(`‚ùî [AUTH-PERMISSIONS] ¬øEl usuario (RolID ${userRoleId}) tiene alguno de [${requiredPermsString}]? -> ${hasRequiredPermission}`);

      if (!hasRequiredPermission) {
        console.warn(`üö´ [AUTH-PERMISSIONS] Acceso DENEGADO: RolID ${userRoleId} no tiene ninguno de los permisos requeridos: [${requiredPermsString}]. Permisos del usuario: [${userOwnedPermissions.join(', ')}]`);
        return res.status(403).json({ message: "No tienes los permisos necesarios para realizar esta acci√≥n." });
      }

      // console.log('‚úÖ [AUTH-PERMISSIONS] Autorizaci√≥n concedida (permiso espec√≠fico encontrado para no-admin).');
      next();

    } catch (error) {
      console.error("‚ùå [AUTH-PERMISSIONS] Error fatal inesperado en middleware de autorizaci√≥n:", error);
      res.status(500).json({ message: "Error interno del servidor durante la autorizaci√≥n." });
    }
  };
};

module.exports = authorize;